/*
 * IdentityExpress Management API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.nanthealth.identityexpress.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.nanthealth.identityexpress.api.client.model.ClaimDto;
import com.nanthealth.identityexpress.api.client.model.PropertyDto;
import com.nanthealth.identityexpress.api.client.model.SecretDto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ClientDto
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-01-24T03:48:05.487Z")
public class ClientDto {
  @SerializedName("id")
  private String id = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("clientId")
  private String clientId = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("protocolType")
  private String protocolType = null;

  @SerializedName("clientSecrets")
  private List<SecretDto> clientSecrets = null;

  @SerializedName("requireClientSecret")
  private Boolean requireClientSecret = null;

  @SerializedName("clientName")
  private String clientName = null;

  @SerializedName("clientUri")
  private String clientUri = null;

  @SerializedName("logoUri")
  private String logoUri = null;

  @SerializedName("requireConsent")
  private Boolean requireConsent = null;

  @SerializedName("allowRememberConsent")
  private Boolean allowRememberConsent = null;

  @SerializedName("allowedGrantTypes")
  private List<String> allowedGrantTypes = null;

  @SerializedName("requirePkce")
  private Boolean requirePkce = null;

  @SerializedName("allowPlainTextPkce")
  private Boolean allowPlainTextPkce = null;

  @SerializedName("allowAccessTokensViaBrowser")
  private Boolean allowAccessTokensViaBrowser = null;

  @SerializedName("redirectUris")
  private List<String> redirectUris = null;

  @SerializedName("postLogoutRedirectUris")
  private List<String> postLogoutRedirectUris = null;

  @SerializedName("frontChannelLogoutUri")
  private String frontChannelLogoutUri = null;

  @SerializedName("frontChannelLogoutSessionRequired")
  private Boolean frontChannelLogoutSessionRequired = null;

  @SerializedName("allowOfflineAccess")
  private Boolean allowOfflineAccess = null;

  @SerializedName("allowedScopes")
  private List<String> allowedScopes = null;

  @SerializedName("alwaysIncludeUserClaimsInIdToken")
  private Boolean alwaysIncludeUserClaimsInIdToken = null;

  @SerializedName("identityTokenLifetime")
  private Integer identityTokenLifetime = null;

  @SerializedName("accessTokenLifetime")
  private Integer accessTokenLifetime = null;

  @SerializedName("authorizationCodeLifetime")
  private Integer authorizationCodeLifetime = null;

  @SerializedName("absoluteRefreshTokenLifetime")
  private Integer absoluteRefreshTokenLifetime = null;

  @SerializedName("slidingRefreshTokenLifetime")
  private Integer slidingRefreshTokenLifetime = null;

  /**
   * Gets or Sets refreshTokenUsage
   */
  @JsonAdapter(RefreshTokenUsageEnum.Adapter.class)
  public enum RefreshTokenUsageEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    RefreshTokenUsageEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RefreshTokenUsageEnum fromValue(String text) {
      for (RefreshTokenUsageEnum b : RefreshTokenUsageEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RefreshTokenUsageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RefreshTokenUsageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RefreshTokenUsageEnum read(final JsonReader jsonReader) throws IOException {
        Integer value = jsonReader.nextInt();
        return RefreshTokenUsageEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("refreshTokenUsage")
  private RefreshTokenUsageEnum refreshTokenUsage = null;

  @SerializedName("updateAccessTokenClaimsOnRefresh")
  private Boolean updateAccessTokenClaimsOnRefresh = null;

  /**
   * Gets or Sets refreshTokenExpiration
   */
  @JsonAdapter(RefreshTokenExpirationEnum.Adapter.class)
  public enum RefreshTokenExpirationEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    RefreshTokenExpirationEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RefreshTokenExpirationEnum fromValue(String text) {
      for (RefreshTokenExpirationEnum b : RefreshTokenExpirationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RefreshTokenExpirationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RefreshTokenExpirationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RefreshTokenExpirationEnum read(final JsonReader jsonReader) throws IOException {
        Integer value = jsonReader.nextInt();
        return RefreshTokenExpirationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("refreshTokenExpiration")
  private RefreshTokenExpirationEnum refreshTokenExpiration = null;

  /**
   * Gets or Sets accessTokenType
   */
  @JsonAdapter(AccessTokenTypeEnum.Adapter.class)
  public enum AccessTokenTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    AccessTokenTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessTokenTypeEnum fromValue(String text) {
      for (AccessTokenTypeEnum b : AccessTokenTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AccessTokenTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessTokenTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessTokenTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value = jsonReader.nextInt();
        return AccessTokenTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("accessTokenType")
  private AccessTokenTypeEnum accessTokenType = null;

  @SerializedName("enableLocalLogin")
  private Boolean enableLocalLogin = null;

  @SerializedName("identityProviderRestrictions")
  private List<String> identityProviderRestrictions = null;

  @SerializedName("includeJwtId")
  private Boolean includeJwtId = null;

  @SerializedName("claims")
  private List<ClaimDto> claims = null;

  @SerializedName("alwaysSendClientClaims")
  private Boolean alwaysSendClientClaims = null;

  @SerializedName("clientClaimsPrefix")
  private String clientClaimsPrefix = null;

  @SerializedName("allowedCorsOrigins")
  private List<String> allowedCorsOrigins = null;

  @SerializedName("properties")
  private List<PropertyDto> properties = null;

  @SerializedName("pairWiseSubjectSalt")
  private String pairWiseSubjectSalt = null;

  @SerializedName("consentLifetime")
  private Integer consentLifetime = null;

  @SerializedName("backChannelLogoutSessionRequired")
  private Boolean backChannelLogoutSessionRequired = null;

  @SerializedName("backChannelLogoutUri")
  private String backChannelLogoutUri = null;

  @SerializedName("userSSOLifetime")
  private Integer userSSOLifetime = null;

  @SerializedName("nonEditable")
  private Boolean nonEditable = null;

  @SerializedName("deviceCodeLifetime")
  private Integer deviceCodeLifetime = null;

  @SerializedName("userCodeType")
  private String userCodeType = null;

  public ClientDto id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ClientDto enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public ClientDto clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * Get clientId
   * @return clientId
  **/
  @ApiModelProperty(value = "")
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }

  public ClientDto description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ClientDto protocolType(String protocolType) {
    this.protocolType = protocolType;
    return this;
  }

   /**
   * Get protocolType
   * @return protocolType
  **/
  @ApiModelProperty(value = "")
  public String getProtocolType() {
    return protocolType;
  }

  public void setProtocolType(String protocolType) {
    this.protocolType = protocolType;
  }

  public ClientDto clientSecrets(List<SecretDto> clientSecrets) {
    this.clientSecrets = clientSecrets;
    return this;
  }

  public ClientDto addClientSecretsItem(SecretDto clientSecretsItem) {
    if (this.clientSecrets == null) {
      this.clientSecrets = new ArrayList<SecretDto>();
    }
    this.clientSecrets.add(clientSecretsItem);
    return this;
  }

   /**
   * Get clientSecrets
   * @return clientSecrets
  **/
  @ApiModelProperty(value = "")
  public List<SecretDto> getClientSecrets() {
    return clientSecrets;
  }

  public void setClientSecrets(List<SecretDto> clientSecrets) {
    this.clientSecrets = clientSecrets;
  }

  public ClientDto requireClientSecret(Boolean requireClientSecret) {
    this.requireClientSecret = requireClientSecret;
    return this;
  }

   /**
   * Get requireClientSecret
   * @return requireClientSecret
  **/
  @ApiModelProperty(value = "")
  public Boolean isRequireClientSecret() {
    return requireClientSecret;
  }

  public void setRequireClientSecret(Boolean requireClientSecret) {
    this.requireClientSecret = requireClientSecret;
  }

  public ClientDto clientName(String clientName) {
    this.clientName = clientName;
    return this;
  }

   /**
   * Get clientName
   * @return clientName
  **/
  @ApiModelProperty(value = "")
  public String getClientName() {
    return clientName;
  }

  public void setClientName(String clientName) {
    this.clientName = clientName;
  }

  public ClientDto clientUri(String clientUri) {
    this.clientUri = clientUri;
    return this;
  }

   /**
   * Get clientUri
   * @return clientUri
  **/
  @ApiModelProperty(value = "")
  public String getClientUri() {
    return clientUri;
  }

  public void setClientUri(String clientUri) {
    this.clientUri = clientUri;
  }

  public ClientDto logoUri(String logoUri) {
    this.logoUri = logoUri;
    return this;
  }

   /**
   * Get logoUri
   * @return logoUri
  **/
  @ApiModelProperty(value = "")
  public String getLogoUri() {
    return logoUri;
  }

  public void setLogoUri(String logoUri) {
    this.logoUri = logoUri;
  }

  public ClientDto requireConsent(Boolean requireConsent) {
    this.requireConsent = requireConsent;
    return this;
  }

   /**
   * Get requireConsent
   * @return requireConsent
  **/
  @ApiModelProperty(value = "")
  public Boolean isRequireConsent() {
    return requireConsent;
  }

  public void setRequireConsent(Boolean requireConsent) {
    this.requireConsent = requireConsent;
  }

  public ClientDto allowRememberConsent(Boolean allowRememberConsent) {
    this.allowRememberConsent = allowRememberConsent;
    return this;
  }

   /**
   * Get allowRememberConsent
   * @return allowRememberConsent
  **/
  @ApiModelProperty(value = "")
  public Boolean isAllowRememberConsent() {
    return allowRememberConsent;
  }

  public void setAllowRememberConsent(Boolean allowRememberConsent) {
    this.allowRememberConsent = allowRememberConsent;
  }

  public ClientDto allowedGrantTypes(List<String> allowedGrantTypes) {
    this.allowedGrantTypes = allowedGrantTypes;
    return this;
  }

  public ClientDto addAllowedGrantTypesItem(String allowedGrantTypesItem) {
    if (this.allowedGrantTypes == null) {
      this.allowedGrantTypes = new ArrayList<String>();
    }
    this.allowedGrantTypes.add(allowedGrantTypesItem);
    return this;
  }

   /**
   * Get allowedGrantTypes
   * @return allowedGrantTypes
  **/
  @ApiModelProperty(value = "")
  public List<String> getAllowedGrantTypes() {
    return allowedGrantTypes;
  }

  public void setAllowedGrantTypes(List<String> allowedGrantTypes) {
    this.allowedGrantTypes = allowedGrantTypes;
  }

  public ClientDto requirePkce(Boolean requirePkce) {
    this.requirePkce = requirePkce;
    return this;
  }

   /**
   * Get requirePkce
   * @return requirePkce
  **/
  @ApiModelProperty(value = "")
  public Boolean isRequirePkce() {
    return requirePkce;
  }

  public void setRequirePkce(Boolean requirePkce) {
    this.requirePkce = requirePkce;
  }

  public ClientDto allowPlainTextPkce(Boolean allowPlainTextPkce) {
    this.allowPlainTextPkce = allowPlainTextPkce;
    return this;
  }

   /**
   * Get allowPlainTextPkce
   * @return allowPlainTextPkce
  **/
  @ApiModelProperty(value = "")
  public Boolean isAllowPlainTextPkce() {
    return allowPlainTextPkce;
  }

  public void setAllowPlainTextPkce(Boolean allowPlainTextPkce) {
    this.allowPlainTextPkce = allowPlainTextPkce;
  }

  public ClientDto allowAccessTokensViaBrowser(Boolean allowAccessTokensViaBrowser) {
    this.allowAccessTokensViaBrowser = allowAccessTokensViaBrowser;
    return this;
  }

   /**
   * Get allowAccessTokensViaBrowser
   * @return allowAccessTokensViaBrowser
  **/
  @ApiModelProperty(value = "")
  public Boolean isAllowAccessTokensViaBrowser() {
    return allowAccessTokensViaBrowser;
  }

  public void setAllowAccessTokensViaBrowser(Boolean allowAccessTokensViaBrowser) {
    this.allowAccessTokensViaBrowser = allowAccessTokensViaBrowser;
  }

  public ClientDto redirectUris(List<String> redirectUris) {
    this.redirectUris = redirectUris;
    return this;
  }

  public ClientDto addRedirectUrisItem(String redirectUrisItem) {
    if (this.redirectUris == null) {
      this.redirectUris = new ArrayList<String>();
    }
    this.redirectUris.add(redirectUrisItem);
    return this;
  }

   /**
   * Get redirectUris
   * @return redirectUris
  **/
  @ApiModelProperty(value = "")
  public List<String> getRedirectUris() {
    return redirectUris;
  }

  public void setRedirectUris(List<String> redirectUris) {
    this.redirectUris = redirectUris;
  }

  public ClientDto postLogoutRedirectUris(List<String> postLogoutRedirectUris) {
    this.postLogoutRedirectUris = postLogoutRedirectUris;
    return this;
  }

  public ClientDto addPostLogoutRedirectUrisItem(String postLogoutRedirectUrisItem) {
    if (this.postLogoutRedirectUris == null) {
      this.postLogoutRedirectUris = new ArrayList<String>();
    }
    this.postLogoutRedirectUris.add(postLogoutRedirectUrisItem);
    return this;
  }

   /**
   * Get postLogoutRedirectUris
   * @return postLogoutRedirectUris
  **/
  @ApiModelProperty(value = "")
  public List<String> getPostLogoutRedirectUris() {
    return postLogoutRedirectUris;
  }

  public void setPostLogoutRedirectUris(List<String> postLogoutRedirectUris) {
    this.postLogoutRedirectUris = postLogoutRedirectUris;
  }

  public ClientDto frontChannelLogoutUri(String frontChannelLogoutUri) {
    this.frontChannelLogoutUri = frontChannelLogoutUri;
    return this;
  }

   /**
   * Get frontChannelLogoutUri
   * @return frontChannelLogoutUri
  **/
  @ApiModelProperty(value = "")
  public String getFrontChannelLogoutUri() {
    return frontChannelLogoutUri;
  }

  public void setFrontChannelLogoutUri(String frontChannelLogoutUri) {
    this.frontChannelLogoutUri = frontChannelLogoutUri;
  }

  public ClientDto frontChannelLogoutSessionRequired(Boolean frontChannelLogoutSessionRequired) {
    this.frontChannelLogoutSessionRequired = frontChannelLogoutSessionRequired;
    return this;
  }

   /**
   * Get frontChannelLogoutSessionRequired
   * @return frontChannelLogoutSessionRequired
  **/
  @ApiModelProperty(value = "")
  public Boolean isFrontChannelLogoutSessionRequired() {
    return frontChannelLogoutSessionRequired;
  }

  public void setFrontChannelLogoutSessionRequired(Boolean frontChannelLogoutSessionRequired) {
    this.frontChannelLogoutSessionRequired = frontChannelLogoutSessionRequired;
  }

  public ClientDto allowOfflineAccess(Boolean allowOfflineAccess) {
    this.allowOfflineAccess = allowOfflineAccess;
    return this;
  }

   /**
   * Get allowOfflineAccess
   * @return allowOfflineAccess
  **/
  @ApiModelProperty(value = "")
  public Boolean isAllowOfflineAccess() {
    return allowOfflineAccess;
  }

  public void setAllowOfflineAccess(Boolean allowOfflineAccess) {
    this.allowOfflineAccess = allowOfflineAccess;
  }

  public ClientDto allowedScopes(List<String> allowedScopes) {
    this.allowedScopes = allowedScopes;
    return this;
  }

  public ClientDto addAllowedScopesItem(String allowedScopesItem) {
    if (this.allowedScopes == null) {
      this.allowedScopes = new ArrayList<String>();
    }
    this.allowedScopes.add(allowedScopesItem);
    return this;
  }

   /**
   * Get allowedScopes
   * @return allowedScopes
  **/
  @ApiModelProperty(value = "")
  public List<String> getAllowedScopes() {
    return allowedScopes;
  }

  public void setAllowedScopes(List<String> allowedScopes) {
    this.allowedScopes = allowedScopes;
  }

  public ClientDto alwaysIncludeUserClaimsInIdToken(Boolean alwaysIncludeUserClaimsInIdToken) {
    this.alwaysIncludeUserClaimsInIdToken = alwaysIncludeUserClaimsInIdToken;
    return this;
  }

   /**
   * Get alwaysIncludeUserClaimsInIdToken
   * @return alwaysIncludeUserClaimsInIdToken
  **/
  @ApiModelProperty(value = "")
  public Boolean isAlwaysIncludeUserClaimsInIdToken() {
    return alwaysIncludeUserClaimsInIdToken;
  }

  public void setAlwaysIncludeUserClaimsInIdToken(Boolean alwaysIncludeUserClaimsInIdToken) {
    this.alwaysIncludeUserClaimsInIdToken = alwaysIncludeUserClaimsInIdToken;
  }

  public ClientDto identityTokenLifetime(Integer identityTokenLifetime) {
    this.identityTokenLifetime = identityTokenLifetime;
    return this;
  }

   /**
   * Get identityTokenLifetime
   * @return identityTokenLifetime
  **/
  @ApiModelProperty(value = "")
  public Integer getIdentityTokenLifetime() {
    return identityTokenLifetime;
  }

  public void setIdentityTokenLifetime(Integer identityTokenLifetime) {
    this.identityTokenLifetime = identityTokenLifetime;
  }

  public ClientDto accessTokenLifetime(Integer accessTokenLifetime) {
    this.accessTokenLifetime = accessTokenLifetime;
    return this;
  }

   /**
   * Get accessTokenLifetime
   * @return accessTokenLifetime
  **/
  @ApiModelProperty(value = "")
  public Integer getAccessTokenLifetime() {
    return accessTokenLifetime;
  }

  public void setAccessTokenLifetime(Integer accessTokenLifetime) {
    this.accessTokenLifetime = accessTokenLifetime;
  }

  public ClientDto authorizationCodeLifetime(Integer authorizationCodeLifetime) {
    this.authorizationCodeLifetime = authorizationCodeLifetime;
    return this;
  }

   /**
   * Get authorizationCodeLifetime
   * @return authorizationCodeLifetime
  **/
  @ApiModelProperty(value = "")
  public Integer getAuthorizationCodeLifetime() {
    return authorizationCodeLifetime;
  }

  public void setAuthorizationCodeLifetime(Integer authorizationCodeLifetime) {
    this.authorizationCodeLifetime = authorizationCodeLifetime;
  }

  public ClientDto absoluteRefreshTokenLifetime(Integer absoluteRefreshTokenLifetime) {
    this.absoluteRefreshTokenLifetime = absoluteRefreshTokenLifetime;
    return this;
  }

   /**
   * Get absoluteRefreshTokenLifetime
   * @return absoluteRefreshTokenLifetime
  **/
  @ApiModelProperty(value = "")
  public Integer getAbsoluteRefreshTokenLifetime() {
    return absoluteRefreshTokenLifetime;
  }

  public void setAbsoluteRefreshTokenLifetime(Integer absoluteRefreshTokenLifetime) {
    this.absoluteRefreshTokenLifetime = absoluteRefreshTokenLifetime;
  }

  public ClientDto slidingRefreshTokenLifetime(Integer slidingRefreshTokenLifetime) {
    this.slidingRefreshTokenLifetime = slidingRefreshTokenLifetime;
    return this;
  }

   /**
   * Get slidingRefreshTokenLifetime
   * @return slidingRefreshTokenLifetime
  **/
  @ApiModelProperty(value = "")
  public Integer getSlidingRefreshTokenLifetime() {
    return slidingRefreshTokenLifetime;
  }

  public void setSlidingRefreshTokenLifetime(Integer slidingRefreshTokenLifetime) {
    this.slidingRefreshTokenLifetime = slidingRefreshTokenLifetime;
  }

  public ClientDto refreshTokenUsage(RefreshTokenUsageEnum refreshTokenUsage) {
    this.refreshTokenUsage = refreshTokenUsage;
    return this;
  }

   /**
   * Get refreshTokenUsage
   * @return refreshTokenUsage
  **/
  @ApiModelProperty(value = "")
  public RefreshTokenUsageEnum getRefreshTokenUsage() {
    return refreshTokenUsage;
  }

  public void setRefreshTokenUsage(RefreshTokenUsageEnum refreshTokenUsage) {
    this.refreshTokenUsage = refreshTokenUsage;
  }

  public ClientDto updateAccessTokenClaimsOnRefresh(Boolean updateAccessTokenClaimsOnRefresh) {
    this.updateAccessTokenClaimsOnRefresh = updateAccessTokenClaimsOnRefresh;
    return this;
  }

   /**
   * Get updateAccessTokenClaimsOnRefresh
   * @return updateAccessTokenClaimsOnRefresh
  **/
  @ApiModelProperty(value = "")
  public Boolean isUpdateAccessTokenClaimsOnRefresh() {
    return updateAccessTokenClaimsOnRefresh;
  }

  public void setUpdateAccessTokenClaimsOnRefresh(Boolean updateAccessTokenClaimsOnRefresh) {
    this.updateAccessTokenClaimsOnRefresh = updateAccessTokenClaimsOnRefresh;
  }

  public ClientDto refreshTokenExpiration(RefreshTokenExpirationEnum refreshTokenExpiration) {
    this.refreshTokenExpiration = refreshTokenExpiration;
    return this;
  }

   /**
   * Get refreshTokenExpiration
   * @return refreshTokenExpiration
  **/
  @ApiModelProperty(value = "")
  public RefreshTokenExpirationEnum getRefreshTokenExpiration() {
    return refreshTokenExpiration;
  }

  public void setRefreshTokenExpiration(RefreshTokenExpirationEnum refreshTokenExpiration) {
    this.refreshTokenExpiration = refreshTokenExpiration;
  }

  public ClientDto accessTokenType(AccessTokenTypeEnum accessTokenType) {
    this.accessTokenType = accessTokenType;
    return this;
  }

   /**
   * Get accessTokenType
   * @return accessTokenType
  **/
  @ApiModelProperty(value = "")
  public AccessTokenTypeEnum getAccessTokenType() {
    return accessTokenType;
  }

  public void setAccessTokenType(AccessTokenTypeEnum accessTokenType) {
    this.accessTokenType = accessTokenType;
  }

  public ClientDto enableLocalLogin(Boolean enableLocalLogin) {
    this.enableLocalLogin = enableLocalLogin;
    return this;
  }

   /**
   * Get enableLocalLogin
   * @return enableLocalLogin
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnableLocalLogin() {
    return enableLocalLogin;
  }

  public void setEnableLocalLogin(Boolean enableLocalLogin) {
    this.enableLocalLogin = enableLocalLogin;
  }

  public ClientDto identityProviderRestrictions(List<String> identityProviderRestrictions) {
    this.identityProviderRestrictions = identityProviderRestrictions;
    return this;
  }

  public ClientDto addIdentityProviderRestrictionsItem(String identityProviderRestrictionsItem) {
    if (this.identityProviderRestrictions == null) {
      this.identityProviderRestrictions = new ArrayList<String>();
    }
    this.identityProviderRestrictions.add(identityProviderRestrictionsItem);
    return this;
  }

   /**
   * Get identityProviderRestrictions
   * @return identityProviderRestrictions
  **/
  @ApiModelProperty(value = "")
  public List<String> getIdentityProviderRestrictions() {
    return identityProviderRestrictions;
  }

  public void setIdentityProviderRestrictions(List<String> identityProviderRestrictions) {
    this.identityProviderRestrictions = identityProviderRestrictions;
  }

  public ClientDto includeJwtId(Boolean includeJwtId) {
    this.includeJwtId = includeJwtId;
    return this;
  }

   /**
   * Get includeJwtId
   * @return includeJwtId
  **/
  @ApiModelProperty(value = "")
  public Boolean isIncludeJwtId() {
    return includeJwtId;
  }

  public void setIncludeJwtId(Boolean includeJwtId) {
    this.includeJwtId = includeJwtId;
  }

  public ClientDto claims(List<ClaimDto> claims) {
    this.claims = claims;
    return this;
  }

  public ClientDto addClaimsItem(ClaimDto claimsItem) {
    if (this.claims == null) {
      this.claims = new ArrayList<ClaimDto>();
    }
    this.claims.add(claimsItem);
    return this;
  }

   /**
   * Get claims
   * @return claims
  **/
  @ApiModelProperty(value = "")
  public List<ClaimDto> getClaims() {
    return claims;
  }

  public void setClaims(List<ClaimDto> claims) {
    this.claims = claims;
  }

  public ClientDto alwaysSendClientClaims(Boolean alwaysSendClientClaims) {
    this.alwaysSendClientClaims = alwaysSendClientClaims;
    return this;
  }

   /**
   * Get alwaysSendClientClaims
   * @return alwaysSendClientClaims
  **/
  @ApiModelProperty(value = "")
  public Boolean isAlwaysSendClientClaims() {
    return alwaysSendClientClaims;
  }

  public void setAlwaysSendClientClaims(Boolean alwaysSendClientClaims) {
    this.alwaysSendClientClaims = alwaysSendClientClaims;
  }

  public ClientDto clientClaimsPrefix(String clientClaimsPrefix) {
    this.clientClaimsPrefix = clientClaimsPrefix;
    return this;
  }

   /**
   * Get clientClaimsPrefix
   * @return clientClaimsPrefix
  **/
  @ApiModelProperty(value = "")
  public String getClientClaimsPrefix() {
    return clientClaimsPrefix;
  }

  public void setClientClaimsPrefix(String clientClaimsPrefix) {
    this.clientClaimsPrefix = clientClaimsPrefix;
  }

  public ClientDto allowedCorsOrigins(List<String> allowedCorsOrigins) {
    this.allowedCorsOrigins = allowedCorsOrigins;
    return this;
  }

  public ClientDto addAllowedCorsOriginsItem(String allowedCorsOriginsItem) {
    if (this.allowedCorsOrigins == null) {
      this.allowedCorsOrigins = new ArrayList<String>();
    }
    this.allowedCorsOrigins.add(allowedCorsOriginsItem);
    return this;
  }

   /**
   * Get allowedCorsOrigins
   * @return allowedCorsOrigins
  **/
  @ApiModelProperty(value = "")
  public List<String> getAllowedCorsOrigins() {
    return allowedCorsOrigins;
  }

  public void setAllowedCorsOrigins(List<String> allowedCorsOrigins) {
    this.allowedCorsOrigins = allowedCorsOrigins;
  }

  public ClientDto properties(List<PropertyDto> properties) {
    this.properties = properties;
    return this;
  }

  public ClientDto addPropertiesItem(PropertyDto propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<PropertyDto>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @ApiModelProperty(value = "")
  public List<PropertyDto> getProperties() {
    return properties;
  }

  public void setProperties(List<PropertyDto> properties) {
    this.properties = properties;
  }

  public ClientDto pairWiseSubjectSalt(String pairWiseSubjectSalt) {
    this.pairWiseSubjectSalt = pairWiseSubjectSalt;
    return this;
  }

   /**
   * Get pairWiseSubjectSalt
   * @return pairWiseSubjectSalt
  **/
  @ApiModelProperty(value = "")
  public String getPairWiseSubjectSalt() {
    return pairWiseSubjectSalt;
  }

  public void setPairWiseSubjectSalt(String pairWiseSubjectSalt) {
    this.pairWiseSubjectSalt = pairWiseSubjectSalt;
  }

  public ClientDto consentLifetime(Integer consentLifetime) {
    this.consentLifetime = consentLifetime;
    return this;
  }

   /**
   * Get consentLifetime
   * @return consentLifetime
  **/
  @ApiModelProperty(value = "")
  public Integer getConsentLifetime() {
    return consentLifetime;
  }

  public void setConsentLifetime(Integer consentLifetime) {
    this.consentLifetime = consentLifetime;
  }

  public ClientDto backChannelLogoutSessionRequired(Boolean backChannelLogoutSessionRequired) {
    this.backChannelLogoutSessionRequired = backChannelLogoutSessionRequired;
    return this;
  }

   /**
   * Get backChannelLogoutSessionRequired
   * @return backChannelLogoutSessionRequired
  **/
  @ApiModelProperty(value = "")
  public Boolean isBackChannelLogoutSessionRequired() {
    return backChannelLogoutSessionRequired;
  }

  public void setBackChannelLogoutSessionRequired(Boolean backChannelLogoutSessionRequired) {
    this.backChannelLogoutSessionRequired = backChannelLogoutSessionRequired;
  }

  public ClientDto backChannelLogoutUri(String backChannelLogoutUri) {
    this.backChannelLogoutUri = backChannelLogoutUri;
    return this;
  }

   /**
   * Get backChannelLogoutUri
   * @return backChannelLogoutUri
  **/
  @ApiModelProperty(value = "")
  public String getBackChannelLogoutUri() {
    return backChannelLogoutUri;
  }

  public void setBackChannelLogoutUri(String backChannelLogoutUri) {
    this.backChannelLogoutUri = backChannelLogoutUri;
  }

  public ClientDto userSSOLifetime(Integer userSSOLifetime) {
    this.userSSOLifetime = userSSOLifetime;
    return this;
  }

   /**
   * Get userSSOLifetime
   * @return userSSOLifetime
  **/
  @ApiModelProperty(value = "")
  public Integer getUserSSOLifetime() {
    return userSSOLifetime;
  }

  public void setUserSSOLifetime(Integer userSSOLifetime) {
    this.userSSOLifetime = userSSOLifetime;
  }

  public ClientDto nonEditable(Boolean nonEditable) {
    this.nonEditable = nonEditable;
    return this;
  }

   /**
   * Get nonEditable
   * @return nonEditable
  **/
  @ApiModelProperty(value = "")
  public Boolean isNonEditable() {
    return nonEditable;
  }

  public void setNonEditable(Boolean nonEditable) {
    this.nonEditable = nonEditable;
  }

  public ClientDto deviceCodeLifetime(Integer deviceCodeLifetime) {
    this.deviceCodeLifetime = deviceCodeLifetime;
    return this;
  }

   /**
   * Get deviceCodeLifetime
   * @return deviceCodeLifetime
  **/
  @ApiModelProperty(value = "")
  public Integer getDeviceCodeLifetime() {
    return deviceCodeLifetime;
  }

  public void setDeviceCodeLifetime(Integer deviceCodeLifetime) {
    this.deviceCodeLifetime = deviceCodeLifetime;
  }

  public ClientDto userCodeType(String userCodeType) {
    this.userCodeType = userCodeType;
    return this;
  }

   /**
   * Get userCodeType
   * @return userCodeType
  **/
  @ApiModelProperty(value = "")
  public String getUserCodeType() {
    return userCodeType;
  }

  public void setUserCodeType(String userCodeType) {
    this.userCodeType = userCodeType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientDto clientDto = (ClientDto) o;
    return Objects.equals(this.id, clientDto.id) &&
        Objects.equals(this.enabled, clientDto.enabled) &&
        Objects.equals(this.clientId, clientDto.clientId) &&
        Objects.equals(this.description, clientDto.description) &&
        Objects.equals(this.protocolType, clientDto.protocolType) &&
        Objects.equals(this.clientSecrets, clientDto.clientSecrets) &&
        Objects.equals(this.requireClientSecret, clientDto.requireClientSecret) &&
        Objects.equals(this.clientName, clientDto.clientName) &&
        Objects.equals(this.clientUri, clientDto.clientUri) &&
        Objects.equals(this.logoUri, clientDto.logoUri) &&
        Objects.equals(this.requireConsent, clientDto.requireConsent) &&
        Objects.equals(this.allowRememberConsent, clientDto.allowRememberConsent) &&
        Objects.equals(this.allowedGrantTypes, clientDto.allowedGrantTypes) &&
        Objects.equals(this.requirePkce, clientDto.requirePkce) &&
        Objects.equals(this.allowPlainTextPkce, clientDto.allowPlainTextPkce) &&
        Objects.equals(this.allowAccessTokensViaBrowser, clientDto.allowAccessTokensViaBrowser) &&
        Objects.equals(this.redirectUris, clientDto.redirectUris) &&
        Objects.equals(this.postLogoutRedirectUris, clientDto.postLogoutRedirectUris) &&
        Objects.equals(this.frontChannelLogoutUri, clientDto.frontChannelLogoutUri) &&
        Objects.equals(this.frontChannelLogoutSessionRequired, clientDto.frontChannelLogoutSessionRequired) &&
        Objects.equals(this.allowOfflineAccess, clientDto.allowOfflineAccess) &&
        Objects.equals(this.allowedScopes, clientDto.allowedScopes) &&
        Objects.equals(this.alwaysIncludeUserClaimsInIdToken, clientDto.alwaysIncludeUserClaimsInIdToken) &&
        Objects.equals(this.identityTokenLifetime, clientDto.identityTokenLifetime) &&
        Objects.equals(this.accessTokenLifetime, clientDto.accessTokenLifetime) &&
        Objects.equals(this.authorizationCodeLifetime, clientDto.authorizationCodeLifetime) &&
        Objects.equals(this.absoluteRefreshTokenLifetime, clientDto.absoluteRefreshTokenLifetime) &&
        Objects.equals(this.slidingRefreshTokenLifetime, clientDto.slidingRefreshTokenLifetime) &&
        Objects.equals(this.refreshTokenUsage, clientDto.refreshTokenUsage) &&
        Objects.equals(this.updateAccessTokenClaimsOnRefresh, clientDto.updateAccessTokenClaimsOnRefresh) &&
        Objects.equals(this.refreshTokenExpiration, clientDto.refreshTokenExpiration) &&
        Objects.equals(this.accessTokenType, clientDto.accessTokenType) &&
        Objects.equals(this.enableLocalLogin, clientDto.enableLocalLogin) &&
        Objects.equals(this.identityProviderRestrictions, clientDto.identityProviderRestrictions) &&
        Objects.equals(this.includeJwtId, clientDto.includeJwtId) &&
        Objects.equals(this.claims, clientDto.claims) &&
        Objects.equals(this.alwaysSendClientClaims, clientDto.alwaysSendClientClaims) &&
        Objects.equals(this.clientClaimsPrefix, clientDto.clientClaimsPrefix) &&
        Objects.equals(this.allowedCorsOrigins, clientDto.allowedCorsOrigins) &&
        Objects.equals(this.properties, clientDto.properties) &&
        Objects.equals(this.pairWiseSubjectSalt, clientDto.pairWiseSubjectSalt) &&
        Objects.equals(this.consentLifetime, clientDto.consentLifetime) &&
        Objects.equals(this.backChannelLogoutSessionRequired, clientDto.backChannelLogoutSessionRequired) &&
        Objects.equals(this.backChannelLogoutUri, clientDto.backChannelLogoutUri) &&
        Objects.equals(this.userSSOLifetime, clientDto.userSSOLifetime) &&
        Objects.equals(this.nonEditable, clientDto.nonEditable) &&
        Objects.equals(this.deviceCodeLifetime, clientDto.deviceCodeLifetime) &&
        Objects.equals(this.userCodeType, clientDto.userCodeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, enabled, clientId, description, protocolType, clientSecrets, requireClientSecret, clientName, clientUri, logoUri, requireConsent, allowRememberConsent, allowedGrantTypes, requirePkce, allowPlainTextPkce, allowAccessTokensViaBrowser, redirectUris, postLogoutRedirectUris, frontChannelLogoutUri, frontChannelLogoutSessionRequired, allowOfflineAccess, allowedScopes, alwaysIncludeUserClaimsInIdToken, identityTokenLifetime, accessTokenLifetime, authorizationCodeLifetime, absoluteRefreshTokenLifetime, slidingRefreshTokenLifetime, refreshTokenUsage, updateAccessTokenClaimsOnRefresh, refreshTokenExpiration, accessTokenType, enableLocalLogin, identityProviderRestrictions, includeJwtId, claims, alwaysSendClientClaims, clientClaimsPrefix, allowedCorsOrigins, properties, pairWiseSubjectSalt, consentLifetime, backChannelLogoutSessionRequired, backChannelLogoutUri, userSSOLifetime, nonEditable, deviceCodeLifetime, userCodeType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientDto {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    protocolType: ").append(toIndentedString(protocolType)).append("\n");
    sb.append("    clientSecrets: ").append(toIndentedString(clientSecrets)).append("\n");
    sb.append("    requireClientSecret: ").append(toIndentedString(requireClientSecret)).append("\n");
    sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
    sb.append("    clientUri: ").append(toIndentedString(clientUri)).append("\n");
    sb.append("    logoUri: ").append(toIndentedString(logoUri)).append("\n");
    sb.append("    requireConsent: ").append(toIndentedString(requireConsent)).append("\n");
    sb.append("    allowRememberConsent: ").append(toIndentedString(allowRememberConsent)).append("\n");
    sb.append("    allowedGrantTypes: ").append(toIndentedString(allowedGrantTypes)).append("\n");
    sb.append("    requirePkce: ").append(toIndentedString(requirePkce)).append("\n");
    sb.append("    allowPlainTextPkce: ").append(toIndentedString(allowPlainTextPkce)).append("\n");
    sb.append("    allowAccessTokensViaBrowser: ").append(toIndentedString(allowAccessTokensViaBrowser)).append("\n");
    sb.append("    redirectUris: ").append(toIndentedString(redirectUris)).append("\n");
    sb.append("    postLogoutRedirectUris: ").append(toIndentedString(postLogoutRedirectUris)).append("\n");
    sb.append("    frontChannelLogoutUri: ").append(toIndentedString(frontChannelLogoutUri)).append("\n");
    sb.append("    frontChannelLogoutSessionRequired: ").append(toIndentedString(frontChannelLogoutSessionRequired)).append("\n");
    sb.append("    allowOfflineAccess: ").append(toIndentedString(allowOfflineAccess)).append("\n");
    sb.append("    allowedScopes: ").append(toIndentedString(allowedScopes)).append("\n");
    sb.append("    alwaysIncludeUserClaimsInIdToken: ").append(toIndentedString(alwaysIncludeUserClaimsInIdToken)).append("\n");
    sb.append("    identityTokenLifetime: ").append(toIndentedString(identityTokenLifetime)).append("\n");
    sb.append("    accessTokenLifetime: ").append(toIndentedString(accessTokenLifetime)).append("\n");
    sb.append("    authorizationCodeLifetime: ").append(toIndentedString(authorizationCodeLifetime)).append("\n");
    sb.append("    absoluteRefreshTokenLifetime: ").append(toIndentedString(absoluteRefreshTokenLifetime)).append("\n");
    sb.append("    slidingRefreshTokenLifetime: ").append(toIndentedString(slidingRefreshTokenLifetime)).append("\n");
    sb.append("    refreshTokenUsage: ").append(toIndentedString(refreshTokenUsage)).append("\n");
    sb.append("    updateAccessTokenClaimsOnRefresh: ").append(toIndentedString(updateAccessTokenClaimsOnRefresh)).append("\n");
    sb.append("    refreshTokenExpiration: ").append(toIndentedString(refreshTokenExpiration)).append("\n");
    sb.append("    accessTokenType: ").append(toIndentedString(accessTokenType)).append("\n");
    sb.append("    enableLocalLogin: ").append(toIndentedString(enableLocalLogin)).append("\n");
    sb.append("    identityProviderRestrictions: ").append(toIndentedString(identityProviderRestrictions)).append("\n");
    sb.append("    includeJwtId: ").append(toIndentedString(includeJwtId)).append("\n");
    sb.append("    claims: ").append(toIndentedString(claims)).append("\n");
    sb.append("    alwaysSendClientClaims: ").append(toIndentedString(alwaysSendClientClaims)).append("\n");
    sb.append("    clientClaimsPrefix: ").append(toIndentedString(clientClaimsPrefix)).append("\n");
    sb.append("    allowedCorsOrigins: ").append(toIndentedString(allowedCorsOrigins)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    pairWiseSubjectSalt: ").append(toIndentedString(pairWiseSubjectSalt)).append("\n");
    sb.append("    consentLifetime: ").append(toIndentedString(consentLifetime)).append("\n");
    sb.append("    backChannelLogoutSessionRequired: ").append(toIndentedString(backChannelLogoutSessionRequired)).append("\n");
    sb.append("    backChannelLogoutUri: ").append(toIndentedString(backChannelLogoutUri)).append("\n");
    sb.append("    userSSOLifetime: ").append(toIndentedString(userSSOLifetime)).append("\n");
    sb.append("    nonEditable: ").append(toIndentedString(nonEditable)).append("\n");
    sb.append("    deviceCodeLifetime: ").append(toIndentedString(deviceCodeLifetime)).append("\n");
    sb.append("    userCodeType: ").append(toIndentedString(userCodeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


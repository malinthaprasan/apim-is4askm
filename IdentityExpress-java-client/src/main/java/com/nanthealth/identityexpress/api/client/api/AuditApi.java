/*
 * IdentityExpress Management API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.nanthealth.identityexpress.api.client.api;

import com.google.gson.reflect.TypeToken;
import com.nanthealth.identityexpress.api.client.ApiCallback;
import com.nanthealth.identityexpress.api.client.ApiClient;
import com.nanthealth.identityexpress.api.client.ApiException;
import com.nanthealth.identityexpress.api.client.ApiResponse;
import com.nanthealth.identityexpress.api.client.Configuration;
import com.nanthealth.identityexpress.api.client.Pair;
import com.nanthealth.identityexpress.api.client.ProgressRequestBody;
import com.nanthealth.identityexpress.api.client.ProgressResponseBody;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuditApi {
    private ApiClient apiClient;

    public AuditApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuditApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for auditedEventsGet
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call auditedEventsGetCall(String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auditedEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("From", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("To", to));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PageSize", pageSize));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Sort", sort));
        if (subject != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Subject", subject));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Source", source));
        if (auditAction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AuditAction", auditAction));
        if (resource != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Resource", resource));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ResourceType", resourceType));
        if (success != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Success", success));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call auditedEventsGetValidateBeforeCall(String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = auditedEventsGetCall(from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void auditedEventsGet(String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success) throws ApiException {
        auditedEventsGetWithHttpInfo(from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success);
    }

    /**
     * 
     * 
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> auditedEventsGetWithHttpInfo(String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success) throws ApiException {
        com.squareup.okhttp.Call call = auditedEventsGetValidateBeforeCall(from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call auditedEventsGetAsync(String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = auditedEventsGetValidateBeforeCall(from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for auditedEventsPost
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call auditedEventsPostCall(String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auditedEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("From", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("To", to));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PageSize", pageSize));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Sort", sort));
        if (subject != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Subject", subject));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Source", source));
        if (auditAction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AuditAction", auditAction));
        if (resource != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Resource", resource));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ResourceType", resourceType));
        if (success != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Success", success));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call auditedEventsPostValidateBeforeCall(String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = auditedEventsPostCall(from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void auditedEventsPost(String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success) throws ApiException {
        auditedEventsPostWithHttpInfo(from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success);
    }

    /**
     * 
     * 
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> auditedEventsPostWithHttpInfo(String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success) throws ApiException {
        com.squareup.okhttp.Call call = auditedEventsPostValidateBeforeCall(from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call auditedEventsPostAsync(String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = auditedEventsPostValidateBeforeCall(from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for clientsByClientIdAuditedEventsGet
     * @param clientId  (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clientsByClientIdAuditedEventsGetCall(String clientId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients/{clientId}/auditedEvents"
            .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("From", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("To", to));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PageSize", pageSize));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Sort", sort));
        if (subject != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Subject", subject));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Source", source));
        if (auditAction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AuditAction", auditAction));
        if (resource != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Resource", resource));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ResourceType", resourceType));
        if (success != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Success", success));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clientsByClientIdAuditedEventsGetValidateBeforeCall(String clientId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling clientsByClientIdAuditedEventsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = clientsByClientIdAuditedEventsGetCall(clientId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param clientId  (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void clientsByClientIdAuditedEventsGet(String clientId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success) throws ApiException {
        clientsByClientIdAuditedEventsGetWithHttpInfo(clientId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success);
    }

    /**
     * 
     * 
     * @param clientId  (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> clientsByClientIdAuditedEventsGetWithHttpInfo(String clientId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success) throws ApiException {
        com.squareup.okhttp.Call call = clientsByClientIdAuditedEventsGetValidateBeforeCall(clientId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param clientId  (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clientsByClientIdAuditedEventsGetAsync(String clientId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clientsByClientIdAuditedEventsGetValidateBeforeCall(clientId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for clientsByClientIdAuditedEventsPost
     * @param clientId  (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clientsByClientIdAuditedEventsPostCall(String clientId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients/{clientId}/auditedEvents"
            .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("From", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("To", to));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PageSize", pageSize));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Sort", sort));
        if (subject != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Subject", subject));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Source", source));
        if (auditAction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AuditAction", auditAction));
        if (resource != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Resource", resource));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ResourceType", resourceType));
        if (success != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Success", success));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clientsByClientIdAuditedEventsPostValidateBeforeCall(String clientId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling clientsByClientIdAuditedEventsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = clientsByClientIdAuditedEventsPostCall(clientId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param clientId  (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void clientsByClientIdAuditedEventsPost(String clientId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success) throws ApiException {
        clientsByClientIdAuditedEventsPostWithHttpInfo(clientId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success);
    }

    /**
     * 
     * 
     * @param clientId  (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> clientsByClientIdAuditedEventsPostWithHttpInfo(String clientId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success) throws ApiException {
        com.squareup.okhttp.Call call = clientsByClientIdAuditedEventsPostValidateBeforeCall(clientId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param clientId  (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clientsByClientIdAuditedEventsPostAsync(String clientId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clientsByClientIdAuditedEventsPostValidateBeforeCall(clientId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for usersByUserIdAuditedEventsGet
     * @param userId  (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersByUserIdAuditedEventsGetCall(String userId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/auditedEvents"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("From", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("To", to));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PageSize", pageSize));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Sort", sort));
        if (subject != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Subject", subject));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Source", source));
        if (auditAction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AuditAction", auditAction));
        if (resource != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Resource", resource));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ResourceType", resourceType));
        if (success != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Success", success));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersByUserIdAuditedEventsGetValidateBeforeCall(String userId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersByUserIdAuditedEventsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = usersByUserIdAuditedEventsGetCall(userId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void usersByUserIdAuditedEventsGet(String userId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success) throws ApiException {
        usersByUserIdAuditedEventsGetWithHttpInfo(userId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success);
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> usersByUserIdAuditedEventsGetWithHttpInfo(String userId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success) throws ApiException {
        com.squareup.okhttp.Call call = usersByUserIdAuditedEventsGetValidateBeforeCall(userId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersByUserIdAuditedEventsGetAsync(String userId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersByUserIdAuditedEventsGetValidateBeforeCall(userId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for usersByUserIdAuditedEventsPost
     * @param userId  (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersByUserIdAuditedEventsPostCall(String userId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/auditedEvents"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("From", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("To", to));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PageSize", pageSize));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Sort", sort));
        if (subject != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Subject", subject));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Source", source));
        if (auditAction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AuditAction", auditAction));
        if (resource != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Resource", resource));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ResourceType", resourceType));
        if (success != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Success", success));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersByUserIdAuditedEventsPostValidateBeforeCall(String userId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersByUserIdAuditedEventsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = usersByUserIdAuditedEventsPostCall(userId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void usersByUserIdAuditedEventsPost(String userId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success) throws ApiException {
        usersByUserIdAuditedEventsPostWithHttpInfo(userId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success);
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> usersByUserIdAuditedEventsPostWithHttpInfo(String userId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success) throws ApiException {
        com.squareup.okhttp.Call call = usersByUserIdAuditedEventsPostValidateBeforeCall(userId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param from  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param subject  (optional)
     * @param source  (optional)
     * @param auditAction  (optional)
     * @param resource  (optional)
     * @param resourceType  (optional)
     * @param success  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersByUserIdAuditedEventsPostAsync(String userId, String from, String to, Integer page, Integer pageSize, String sort, String subject, String source, String auditAction, String resource, String resourceType, Boolean success, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersByUserIdAuditedEventsPostValidateBeforeCall(userId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}

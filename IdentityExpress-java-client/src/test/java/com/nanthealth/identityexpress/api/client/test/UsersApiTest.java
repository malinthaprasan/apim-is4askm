/*
 * IdentityExpress Management API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.nanthealth.identityexpress.api.client.test;

import org.junit.Test;

import com.nanthealth.identityexpress.api.client.ApiException;
import com.nanthealth.identityexpress.api.client.api.UsersApi;
import com.nanthealth.identityexpress.api.client.model.ClaimDto;
import com.nanthealth.identityexpress.api.client.model.CreateUserDto;
import com.nanthealth.identityexpress.api.client.model.EditClaimDto;
import com.nanthealth.identityexpress.api.client.model.UserDto;
import com.nanthealth.identityexpress.api.client.model.UserLoginDto;

import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersBySubjectAppsByClientIdDeleteTest() throws ApiException {
        String subject = null;
        String clientId = null;
        api.usersBySubjectAppsByClientIdDelete(subject, clientId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersBySubjectAppsDeleteTest() throws ApiException {
        String subject = null;
        api.usersBySubjectAppsDelete(subject);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersBySubjectAppsGetTest() throws ApiException {
        String subject = null;
        api.usersBySubjectAppsGet(subject);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersBySubjectClaimsDeleteTest() throws ApiException {
        String subject = null;
        ClaimDto claim = null;
        api.usersBySubjectClaimsDelete(subject, claim);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersBySubjectClaimsPostTest() throws ApiException {
        String subject = null;
        ClaimDto claim = null;
        api.usersBySubjectClaimsPost(subject, claim);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersBySubjectClaimsPutTest() throws ApiException {
        String subject = null;
        EditClaimDto dto = null;
        api.usersBySubjectClaimsPut(subject, dto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersBySubjectDeleteTest() throws ApiException {
        String subject = null;
        api.usersBySubjectDelete(subject);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersBySubjectGetTest() throws ApiException {
        String subject = null;
        api.usersBySubjectGet(subject);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersBySubjectLoginsDeleteTest() throws ApiException {
        String subject = null;
        UserLoginDto userLogin = null;
        api.usersBySubjectLoginsDelete(subject, userLogin);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersBySubjectLoginsGetTest() throws ApiException {
        String subject = null;
        api.usersBySubjectLoginsGet(subject);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersBySubjectPasswordResetGetTest() throws ApiException {
        String subject = null;
        api.usersBySubjectPasswordResetGet(subject);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersBySubjectPutTest() throws ApiException {
        String subject = null;
        UserDto user = null;
        api.usersBySubjectPut(subject, user);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersBySubjectRolesDeleteTest() throws ApiException {
        String subject = null;
        List<String> roles = null;
        api.usersBySubjectRolesDelete(subject, roles);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersBySubjectRolesPostTest() throws ApiException {
        String subject = null;
        List<String> roles = null;
        api.usersBySubjectRolesPost(subject, roles);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersGetTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        String sort = null;
        String username = null;
        String email = null;
        String name = null;
        String id = null;
        String state = null;
        String q = null;
        api.usersGet(page, pageSize, sort, username, email, name, id, state, q);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersLightweightGetTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        String state = null;
        String q = null;
        api.usersLightweightGet(page, pageSize, state, q);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersPostTest() throws ApiException {
        CreateUserDto user = null;
        api.usersPost(user);

        // TODO: test validations
    }
    
}

/*
 * IdentityExpress Management API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.nanthealth.identityexpress.api.client.test;

import org.junit.Test;

import com.nanthealth.identityexpress.api.client.ApiException;
import com.nanthealth.identityexpress.api.client.api.AuditApi;

import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuditApi
 */
@Ignore
public class AuditApiTest {

    private final AuditApi api = new AuditApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void auditedEventsGetTest() throws ApiException {
        String from = null;
        String to = null;
        Integer page = null;
        Integer pageSize = null;
        String sort = null;
        String subject = null;
        String source = null;
        String auditAction = null;
        String resource = null;
        String resourceType = null;
        Boolean success = null;
        api.auditedEventsGet(from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void auditedEventsPostTest() throws ApiException {
        String from = null;
        String to = null;
        Integer page = null;
        Integer pageSize = null;
        String sort = null;
        String subject = null;
        String source = null;
        String auditAction = null;
        String resource = null;
        String resourceType = null;
        Boolean success = null;
        api.auditedEventsPost(from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientsByClientIdAuditedEventsGetTest() throws ApiException {
        String clientId = null;
        String from = null;
        String to = null;
        Integer page = null;
        Integer pageSize = null;
        String sort = null;
        String subject = null;
        String source = null;
        String auditAction = null;
        String resource = null;
        String resourceType = null;
        Boolean success = null;
        api.clientsByClientIdAuditedEventsGet(clientId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientsByClientIdAuditedEventsPostTest() throws ApiException {
        String clientId = null;
        String from = null;
        String to = null;
        Integer page = null;
        Integer pageSize = null;
        String sort = null;
        String subject = null;
        String source = null;
        String auditAction = null;
        String resource = null;
        String resourceType = null;
        Boolean success = null;
        api.clientsByClientIdAuditedEventsPost(clientId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersByUserIdAuditedEventsGetTest() throws ApiException {
        String userId = null;
        String from = null;
        String to = null;
        Integer page = null;
        Integer pageSize = null;
        String sort = null;
        String subject = null;
        String source = null;
        String auditAction = null;
        String resource = null;
        String resourceType = null;
        Boolean success = null;
        api.usersByUserIdAuditedEventsGet(userId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersByUserIdAuditedEventsPostTest() throws ApiException {
        String userId = null;
        String from = null;
        String to = null;
        Integer page = null;
        Integer pageSize = null;
        String sort = null;
        String subject = null;
        String source = null;
        String auditAction = null;
        String resource = null;
        String resourceType = null;
        Boolean success = null;
        api.usersByUserIdAuditedEventsPost(userId, from, to, page, pageSize, sort, subject, source, auditAction, resource, resourceType, success);

        // TODO: test validations
    }
    
}
